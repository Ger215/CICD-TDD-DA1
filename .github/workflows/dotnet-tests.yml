name: Build and Test

on:
  pull_request:
  push:
    branches: [main]

env:
  DOTNET_VERSION: '6.0.x'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore

      - name: Run build
        run: dotnet build --configuration Release

  test:
    name: Test
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Dependencies
        run: dotnet restore

      - name: Run Build
        run: dotnet build --configuration Release

      - name: Generate Test Results
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFilePrefix=test-results" --results-directory ./coverage

      - name: Uploaded Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Uploaded Test Results
          path: coverage/test-results*
          reporter: dotnet-trx
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-error: true
          fail-on-empty: true
          only-summary: false

      - name: Generate Test Coverage
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --settings .runsettings

      - name: Join Coverage Reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.9
        with:
          reports: coverage/**/coverage.cobertura.xml
          targetdir: coverage
          reporttypes: 'Cobertura'

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/*.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '85 90'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always()
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Write to Job Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  create-pr:
    name: Create Pull Request (if coverage changed)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Create Branch and Commit Report
        run: |
          BRANCH_NAME="ci/update-metrics-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $BRANCH_NAME

          # Agregar archivos de cobertura si hay cambios
          git add coverage || true

          if ! git diff --cached --quiet; then
            git commit -m "chore: update coverage report [ci skip]"
            git push origin $BRANCH_NAME

            gh pr create --title "chore: update coverage report" \
                         --body "This PR was automatically generated to update code coverage metrics." \
                         --base main --head $BRANCH_NAME
          else
            echo "No coverage changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
