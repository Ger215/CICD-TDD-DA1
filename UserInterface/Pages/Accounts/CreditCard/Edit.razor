@page "/accounts/creditCardAccounts/{id:int}/edit"

<h1>Edit Credit Card Account</h1>

@using UserInterface.Data;
@using Logic.Interfaces
@using Logic.DTOs

@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject ICreditCardAccountController CreditCardAccountController

<form>
    <div class="form-group">
        <label for="title">Issuing Bank</label>
        <input type="text" class="form-control" id="name" @bind="creditCardAccount.IssuingBank" />
    </div>
    <div class="form-group">
        <label for="title">Last Four Digits</label>
        <input type="text" class="form-control" id="name" @bind="creditCardAccount.LastFourDigits" />
    </div>
    <div class="form-group">
        <label for="title">Closing Date</label>
        <input type="date" class="form-control" id="name" @bind="creditCardAccount.ClosingDate" />
    </div>

    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
        <a href="/accounts">Cancel</a>
    </div>
</form>

@if (showAccountErrorModal)
{
                <AuthenticationModal 
                            Title="Account Error" 
                            Text="@errorMessage" 
                            DialogType=AuthenticationModal.ModalDialogType.Ok
                            OnClose="@CloseAccountErrorModal">
                </AuthenticationModal>
}


@code {
    [Parameter]
    public int Id { get; set; }
    private List<CreditCardAccountDto>? creditCardAccounts;
    private CreditCardAccountDto? element;
    private CreditCardAccountDto creditCardAccount;
    private bool showAccountErrorModal = false;
    private string errorMessage;

    protected override void OnInitialized()
    {
        creditCardAccounts = CreditCardAccountController.GetCreditCardAccounts(UserSession.LoggedUser.Id);
        creditCardAccount = CreditCardAccountController.GetCreditCardAccountById(Id);
        element = new CreditCardAccountDto();
    }

    private void CloseAccountErrorModal(bool accepted)
    {
        showAccountErrorModal = false;
        StateHasChanged();
    }

    private void SaveChanges()
    {
        try
        {
            UpdateCreditCardAccountDto();
            CreditCardAccountController.UpdateCreditCardAccount(element, UserSession.LoggedUser.Id);
            NavigationManager.NavigateTo("/accounts/creditCardAccounts");
        }
        catch(Exception ex)
        {
            showAccountErrorModal = true;
            errorMessage = ex.Message;
        }
    }

    private void UpdateCreditCardAccountDto()
    {
        element.Id = creditCardAccount.Id;
        element.IssuingBank = creditCardAccount.IssuingBank;
        element.LastFourDigits = creditCardAccount.LastFourDigits;
        element.ClosingDate = creditCardAccount.ClosingDate;
    }
}

